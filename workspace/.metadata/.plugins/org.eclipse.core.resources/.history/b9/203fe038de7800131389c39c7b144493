import java.util.Random;


public class automataLib {

	Universe u;
	Random r = new Random();
	dataSources d;
	
	neighbours n; //TEST
	
	public automataLib(Universe uni, dataSources data) {
		u=uni;
		d=data;
		
		int rr = 8;
		int rrr = 4;
		
		n = new neighbours(8);
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 0);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 1);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 2);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 3);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 4);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 5);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 6);		//TEST
		n.setNBH(r.nextInt(rr)-rrr, r.nextInt(rr)-rrr, 0, 7);		//TEST
		
	}
	
	public void writeData(int[] dd) {
		for(int i = 0; i < u.universe.length; i++) {
			for (int j = 0; j < u.universe[0].length; j++) {
				for (int k = 0; k < u.universe[0][0].length; k++) {
					u.universe[i][j][k] = d.readNext(dd);
				}
			}
    	}
	}
	
    public int getWrap(int val, int mod, int len) { //takes array co-ord, modification int, array param length, and returns wrap position.

    	if((val+mod) % len < 0) {return len+((val+mod) % len);} else {return (val+mod) % len;}
    	
    }
	
    public void TESTLine(int xx, int yy, int zz, int len) { //TEST
    	for(int i = 0; i < len-xx; i++) {
    			test(xx+i, yy, zz);
    	}
    }
	
    public void changeNBHTEST(int rand){
    	if (r.nextInt(rand) == 0) {
    		n.setNBH(r.nextInt(32)-16, r.nextInt(32)-16, 0, 0);
    	}
    }
    
	public void test(int xx, int yy, int zz){//TEST
		n = new neighbours(4);
		n.setNBH(-1, -1, 0, 0);
		n.setNBH(1, -1, 0, 1);
		n.setNBH(-2, -1, 0, 0);
		n.setNBH(2, -1, 0, 1);
		
		int isOne = 0;

		for(int i = 0; i < n.NBH.length; i++) {
			if(u.universe[getWrap(xx, n.NBH[i][0], u.universe.length)][getWrap(yy, n.NBH[i][1], u.universe[0].length)][getWrap(zz, n.NBH[i][2], u.universe[0][0].length)] == 1) {isOne++;}
		}
		
		if(isOne == 1) {
			u.universe[xx][yy][zz] = 3;
		} else {u.universe[xx][yy][zz] = 0;}

    }
	
	public void conwaytwo(int xx, int yy, int zz){//TEST
		
		n = new neighbours(3);
		n.setNBH(-1, -1, 0, 0);
		n.setNBH(1, -1, 0, 1);
		n.setNBH(0, -1, 0, 2);
		
		int isOne = 0;

		for(int i = 0; i < n.NBH.length; i++) {
			if(u.universe[getWrap(xx, n.NBH[i][0], u.universe.length)][getWrap(yy, n.NBH[i][1], u.universe[0].length)][getWrap(zz, n.NBH[i][2], u.universe[0][0].length)] == 1) {isOne++;}
		}
		

		
		if(isOne == 1) {
			u.universe[xx][yy][zz] = 0;
		}// else {u.universe[xx][yy][zz] = 0;}

		if(isOne == 2) {
			u.universe[xx][yy][zz] = 1;
		}


    }
	
	public void turingSierpenski(int xx, int yy, int zz){//TEST
		n = new neighbours(2);
		n.setNBH(-1, -1, 0, 0);
		n.setNBH(1, -1, 0, 1);
		
		int isOne = 0;

		for(int i = 0; i < n.NBH.length; i++) {
			if(u.universe[getWrap(xx, n.NBH[i][0], u.universe.length)][getWrap(yy, n.NBH[i][1], u.universe[0].length)][getWrap(zz, n.NBH[i][2], u.universe[0][0].length)] == 1) {isOne++;}
		}
		
		if(isOne == 1) {
			u.universe[xx][yy][zz] = 1;
		} else {u.universe[xx][yy][zz] = 0;}

    }
	
	public void conwaytest(int xx, int yy, int zz){//TEST
		//if(true) {;} //if (countsumequalsetc(neighbours[something]) === ?) {action;}
		n = new neighbours(8);
		n.setNBH(-1, -1, 0, 0);		//TEST
		n.setNBH( 0, -1, 0, 1);		//TEST
		n.setNBH( 1, -1, 0, 2);		//TEST
		
		n.setNBH(-1, 0, 0, 3);		//TEST
		n.setNBH( 1, 0, 0, 4);		//TEST
		
		n.setNBH(-1, 1, 0, 5);		//TEST
		n.setNBH(0, 1, 0, 6);		//TEST
		n.setNBH(1, 1, 0, 7);		//TEST
		
		int isOne = 0;

		for(int i = 0; i < n.NBH.length; i++) {
			if(u.snapshotUniverse[getWrap(xx, n.NBH[i][0], u.universe.length)][getWrap(yy, n.NBH[i][1], u.universe[0].length)][getWrap(zz, n.NBH[i][2], u.universe[0][0].length)] == 1) {isOne++;}
		}
		
		if(isOne < 2 && u.snapshotUniverse[xx][yy][zz] == 1) {
			u.universe[xx][yy][zz] = 0;
		}
		
		if(isOne > 3 && u.snapshotUniverse[xx][yy][zz] == 1) {
			u.universe[xx][yy][zz] = 0;
		}
		
		if(isOne == 3 && u.snapshotUniverse[xx][yy][zz] == 0) {
			u.universe[xx][yy][zz] = 1;
		}

    }
	
	public void pissRandomly(int xx, int yy, int zz, int halfRand, int freq) { //chance to reset to random +/- halfrand

		if(r.nextInt(freq) == 0) {
			u.universe[xx][yy][zz] = r.nextInt(halfRand*2)-(halfRand);
			if(u.universe[xx][yy][zz] > u.maxVal) {u.maxVal = u.universe[xx][yy][zz];}
		}

    }
	
	public void pissPositive(int xx, int yy, int zz, int rand, int freq) { //chance to reset to something random, but positive

		if(r.nextInt(freq) == 0) {
			u.universe[xx][yy][zz] = r.nextInt(rand);
			if(u.universe[xx][yy][zz] > u.maxVal) {u.maxVal = u.universe[xx][yy][zz];}
		}

    }
    
    public void placeOne(int xx, int yy, int zz) { //set to 1
    	u.universe[xx][yy][zz] = 1;
    }
    
    public void placeO(int xx, int yy, int zz) { //set to 1
    	u.universe[xx][yy][zz] = 0;
    }
	
    public void transcribeBinaryData(int xx, int yy, int zz, boolean showO) {
    	if(!showO){	if(d.readNext(d.sources[0]) == 1) {u.universe[xx][yy][zz] = 1;} } else {
    		u.universe[xx][yy][zz] = d.readNext(d.sources[0]);
    	}
    }
    
    public void placeLine(int xx, int yy, int zz, int rand, int len, boolean placeO, boolean horiz) { //draws a line with chance. Doesn't support z
    	if(horiz) {
	    	for(int i = 0; i < len-xx; i++) {
	    		if(r.nextInt(rand) == 0) {
	    			placeOne(xx+i, yy, zz);
	    		} else if(placeO) {placeO(xx+i, yy, zz);}
	    	}
	    } else {
	    	for(int i = 0; i < len-yy; i++) {
	    		if(r.nextInt(rand) == 0) {
	    			placeOne(xx, yy+i, zz);
	    		} else if(placeO) {placeO(xx, yy+i, zz);}
	    	}
    	}
    }
    
    public void seed(int xx, int yy, int zz, int rand){ //chance to seed location
    	if(r.nextInt(rand) == 0) {placeOne(xx, yy, zz);}
    }
    
    public void seedAll(int rand){ //chance to seed every pixel
    	for(int i = 0; i < u.universe.length; i++) {
			for (int j = 0; j < u.universe[0].length; j++) {
				for (int k = 0; k < u.universe[0][0].length; k++) {
			    	seed(i,j,k,rand);
				}
			}
    	}
    }
    
    public void seedZ(int rand, int zz){ //chance to seed every pixel
    	for(int i = 0; i < u.universe.length; i++) {
			for (int j = 0; j < u.universe[0].length; j++) {
			    seed(i,j,zz,rand);
			}
    	}
    }
    
}
