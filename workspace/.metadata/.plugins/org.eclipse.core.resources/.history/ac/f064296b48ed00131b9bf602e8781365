/*public class neighbours {
	int[][] NBH;
	//constructor
	public neighbours(int countNbr) {
		setVonn(1);
	}
	
	//Needs to accept both:
			//incremental patterns (moore, von, etc.) 
			//predifined patterns (user-input patterns)
	
	private void setVonn(int n) {
		int nSize = n*(n+1)*2;
		setNbrArray(nSize);

		setNBH(-1, -1, 0, 0);
		setNBH(1, -1, 0, 1);
		setNBH(-1, 1, 0, 2);
		setNBH(1, 1, 0, 3);
		
	}
	
	private void setNbrArray(int countNbr){
		NBH = new int[countNbr][3]; //initiate array with required number of neighbour slots, [x][3] is for x,y,z
	}

	//called to define a neighbour's position (x,y,z,neighbour id)
	private void setNBH(int xR, int yR, int zR, int nbr) {
		NBH[nbr][0] = xR;
		NBH[nbr][1] = yR;
		NBH[nbr][2] = zR;
	}


}*/


public class neighbours {
	int[][] NBH;
	
	//constructor
	public neighbours(int countNbr) {
	//System.out.println("neighbours");
		NBH = new int[countNbr][3]; //initiate array with required number of neighbour slots
	
	}
	//called to define a neighbour's position (x,y,z,neighbour id)
	public void setNBH(int xx, int yy, int zz, int nbr) {
		NBH[nbr][0] = xx;
		NBH[nbr][1] = yy;
		NBH[nbr][2] = zz;
	}
	
	
	
	public void newNbrhood(int countNbr) {
		NBH = new int[countNbr][3]; //initiate array with required number of neighbour slots
	}
	
	public void setNbrhood(int hood){
		
		if(hood == 0) {
			newNbrhood(4);
			setNBH(0, -1, 0, 0);
			setNBH(1, 0, 0, 1);
			setNBH(0, 1, 0, 2);
			setNBH(-1, 0, 0, 3);
		
		}
		
		if(hood == 1) {
			newNbrhood(3);
			setNBH(-1, -1, 0, 0);
			setNBH(1, -1, 0, 1);
			setNBH(0, 1, 0, 2);
		}
		
		if(hood == 2) {
			newNbrhood(5);
			setNBH(-1, 1, 0, 0);
			setNBH(1, 1, 0, 1);
			setNBH(0, -1, 0, 2);
			setNBH(-2, -1, 0, 3);
			setNBH(2, -1, 0, 4);
		}
		
		
		if(hood == 3) {
			newNbrhood(24);
			setNBH( 0, -1, 0, 0);
			setNBH( -1, 0, 0, 1);
			setNBH( 1, 0, 0, 2);
			setNBH( 0, 1, 0, 3);
			setNBH( -1, -1, 0, 4);
			setNBH( 1, 1, 0, 5);
			setNBH( -1, 1, 0, 6);
			setNBH( 1, -1, 0, 7);
			
			setNBH( -2, 0, 0, 8);
			setNBH( 2, 0, 0, 9);
			setNBH( -2, 1, 0, 10);
			setNBH( 2, 1, 0, 11);
			setNBH( -2, -1, 0, 12);
			setNBH( 2, -1, 0, 13);
			
			setNBH( 0, -2, 0, 14);
			setNBH( 0, 2, 0, 15);
			setNBH( 1, -2, 0, 16);
			setNBH( 1, 2, 0, 17);
			setNBH( -1, -2, 0, 18);
			setNBH( -1, 2, 0, 19);
			
			setNBH( -2, -2, 0, 20);
			setNBH( 2, 2, 0, 21);
			setNBH( 2, -2, 0, 22);
			setNBH( -2, 2, 0, 23);
		}
		
		if(hood == 4) {
			newNbrhood(8);
			setNBH( 0, -1, 0, 0);
			setNBH( 1, -1, 0, 1);
			setNBH( 1, 0, 0, 2);
			setNBH( 1, 1, 0, 3);
			setNBH( 0, 1, 0, 4);
			setNBH( -1, 1, 0, 5);
			setNBH( -1, 0, 0, 6);
			setNBH( -1, -1, 0, 7);
		}
		
		
		if(hood == 5) {
			newNbrhood(4);
			setNBH(-1, -1, 0, 0);
			setNBH(1, -1, 0, 1);
			setNBH(-1, 1, 0, 2);
			setNBH(1, 1, 0, 3);
		}
		
		
		if(hood == 6) {
			newNbrhood(6);
			setNBH(-1, 0, 0, 0);
			setNBH(0, -1, 0, 1);
			setNBH(1, 0, 0, 2);
			setNBH(0, 1, 0, 3);
			setNBH(0, 0, -1, 4);
			setNBH(0, 0, 1, 5);
		}
		if(hood == 7) {
			newNbrhood(3);
			setNBH(-1, -1, 0, 0);
			setNBH(1, -1, 0, 1);
			setNBH(0, -1, 0, 2);
		}
		
		
		if(hood == 8) {
			newNbrhood(5);
			setNBH(-1, -1, 0, 0);
			setNBH(1, -1, 0, 1);
			setNBH(0, -1, 0, 2);
			setNBH(-1, 0, 0, 3);
			setNBH(1, 0, 0, 4);
		}
		
		
		if(hood == 9) {
			newNbrhood(2);
			setNBH(-1, -1, 0, 0);
			setNBH(1, -1, 0, 1);
		}
		
		if(hood == 10) {
			newNbrhood(5);
			setNBH(0, -1, 0, 0);
			setNBH( 0, 1, 0, 1);	
			setNBH( -1, 0, 0, 2);
			setNBH( 1, 0, 0, 3);
			setNBH( 0, 0, 0, 4);
		}
		
		if(hood == 11) {
			newNbrhood(2);
			setNBH(0, -1, 0, 0);
			setNBH(-1, 0, 0, 1);
		}
		
		
		if(hood == 12) {
			newNbrhood(3);
			setNBH( -1, -1, 0, 0);
			setNBH( 0, -1, 0, 1);	
			setNBH( -1, 0, 0, 2);
		}
		
		if(hood == 13) {
			newNbrhood(3);
			setNBH(-1, -1, 0, 0);
			setNBH(0, -1, 0, 1);
			setNBH(1, -1, 0, 2);
		}
		
		if(hood == 14) {
			newNbrhood(3);
			setNBH(-1, 0, 0, 0);
			setNBH(0, -1, 0, 1);
			setNBH(1, 0, 0, 2);
		}
		
		
		if(hood == 15) {
			newNbrhood(3);
			setNBH(0, -2, 0, 0);
			setNBH(-2, 0, 0, 1);
			setNBH(-1, -1, 0, 2);
		}
		
		
		if(hood == 16) {
			newNbrhood(4);
			setNBH(1, -1, 0, 0);
			setNBH(-1, -1, 0, 1);
			setNBH(0, -1, 0, 2);
			setNBH(0, -2, 0, 3);
		}
		
		if(hood == 17) {
			newNbrhood(4);
			setNBH(0, -2, 0, 0);
			setNBH(-2, 0, 0, 1);
			setNBH(-1, -1, 0, 2);
			setNBH(-2, -2, 0, 3);
		}
		
		
		if(hood == 18) {
			newNbrhood(5);
			setNBH(-1, -1, 0, 0);
			setNBH(1, -1, 0, 1);
			setNBH(0, -2, 0, 2);
			setNBH(-1, -2, 0, 3);
			setNBH(1, -2, 0, 4);	
		}
		
		
		if(hood == 19) {
			newNbrhood(9);
			setNBH(-1, -3, 0, 0);
			setNBH(1, -3, 0, 1);
			setNBH(-2, -3, 0, 2);
			setNBH(2, -3, 0, 3);
			setNBH(0, -3, 0, 4);
			setNBH(-1, -2, 0, 5);
			setNBH(0, -2, 0, 6);
			setNBH(1, -2, 0, 7);
			setNBH(0, -1, 0, 8);
		}
		
		
		if(hood == 20) {
			newNbrhood(6);
			setNBH( -3, -1, 0, 0);
			setNBH( 3, -1, 0, 1);
			setNBH( -2, -2, 0, 2);
			setNBH( 2, -2, 0, 3);
			setNBH( -1, -1, 0, 4);
			setNBH( -1, -1, 0, 5);
		}
		
		
		if(hood == 21) {
			newNbrhood(6);
			setNBH(0, -1, 0, 0);
			setNBH(-1, 0, 0, 1);	
			setNBH(0, 1, 0, 2);
			setNBH(1, 0, 0, 3);	
			setNBH(-1, -1, 0, 4);
			setNBH(1, 1, 0, 5);
		}
		
		
		if(hood == 22) {
			newNbrhood(6);
			setNBH(-1, 0, 0, 0);
			setNBH( 1, 0, 0, 1);	
			setNBH( 0,-1, 0, 2);
			setNBH( 0, 1, 0, 3);	
			setNBH( 0, 0,-1, 4);
			setNBH( 0, 0, 1, 5);
		}
	
		
		if(hood == 23) {
			newNbrhood(1);
			setNBH(0, 0, -1, 0);
		}
		
		
		if(hood == 24) {
			newNbrhood(14);
			setNBH(0, 0, -1, 0);
			setNBH(0, -1, 0, 1);
			setNBH(-1, 0, 0, 2);
			setNBH(0, 0, 1, 3);
			setNBH(0, 1, 0, 4);
			setNBH(1, 0, 0, 5);
			
			setNBH(-1, -1, -1, 6);
			setNBH(-1, -1, 1, 7);
			setNBH(-1, 1, -1, 8);
			setNBH(-1, 1, 1, 9);
			
			setNBH(1, 1, 1, 10);
			setNBH(1, 1, -1, 11);
			setNBH(1, -1, 1, 12);
			setNBH(1, -1, -1, 13);
		}

		
		if(hood == 25) {
			newNbrhood(7);
			setNBH(1, -1, 0, 0);
			setNBH(-1, -1, 0, 1);
			setNBH(0, -1, 0, 2);
			setNBH(2, -1, 0, 5);
			setNBH(-2, -1, 0, 6);
			setNBH(1, -2, 0, 3);
			setNBH(-1, -2, 0, 4);
		}
		
		/*
		if(hood == 26) {
			newNbrhood(xxx);
			n.setNBH(1, -1, 0, 0);
		n.setNBH(-1, -1, 0, 1);
		n.setNBH(0, -1, 0, 2);
		n.setNBH(2, -1, 0, 5);
		n.setNBH(-2, -1, 0, 6);
		n.setNBH(1, -2, 0, 3);
		n.setNBH(-1, -2, 0, 4);
		n.setNBH(0, 0, 0, 7);
		}
		
		/*
		if(hood == 27) {
			newNbrhood(xxx);
			n.setNBH( 0, -1, 0, 0);
		n.setNBH( -1, 0, 0, 1);
		n.setNBH( 1, 0, 0, 2);
		n.setNBH( 0, 1, 0, 3);
		n.setNBH( -1, -1, 0, 4);
		n.setNBH( 1, 1, 0, 5);
		n.setNBH( -1, 1, 0, 6);
		n.setNBH( 1, -1, 0, 7);
		
		n.setNBH( -2, 0, 0, 8);
		n.setNBH( 2, 0, 0, 9);
		n.setNBH( -2, 1, 0, 10);
		n.setNBH( 2, 1, 0, 11);
		n.setNBH( -2, -1, 0, 12);
		n.setNBH( 2, -1, 0, 13);
		
		n.setNBH( 0, -2, 0, 14);
		n.setNBH( 0, 2, 0, 15);
		n.setNBH( 1, -2, 0, 16);
		n.setNBH( 1, 2, 0, 17);
		n.setNBH( -1, -2, 0, 18);
		n.setNBH( -1, 2, 0, 19);
		
		n.setNBH( -2, -2, 0, 20);
		n.setNBH( 2, 2, 0, 21);
		n.setNBH( 2, -2, 0, 22);
		n.setNBH( -2, 2, 0, 23);
		
		
		n.setNBH( -3, -3, 0, 24);
		n.setNBH( -2, -3, 0, 25);
		n.setNBH( -1, -3, 0, 26);
		n.setNBH( 0, -3, 0, 27);
		n.setNBH( 1, -3, 0, 28);
		n.setNBH( 2, -3, 0, 29);
		n.setNBH( 3, -3, 0, 30);
		
		n.setNBH( -3, 3, 0, 31);
		n.setNBH( -2, 3, 0, 32);
		n.setNBH( -1, 3, 0, 33);
		n.setNBH( 0, 3, 0, 34);
		n.setNBH( 1, 3, 0, 35);
		n.setNBH( 2, 3, 0, 36);
		n.setNBH( 3, 3, 0, 37);
		
		n.setNBH( -3, -2, 0, 38);
		n.setNBH( -3, -1, 0, 39);
		n.setNBH( -3, 0, 0, 40);
		n.setNBH( -3, 1, 0, 41);
		n.setNBH( -3, 2, 0, 42);
		
		n.setNBH( 3, -2, 0, 43);
		n.setNBH( 3, -1, 0, 44);
		n.setNBH( 3, 0, 0, 45);
		n.setNBH( 3, 1, 0, 46);
		n.setNBH( 3, 2, 0, 47);
		
		n.setNBH(0,-4,0,48);
		n.setNBH(1,-4,0,49);
		n.setNBH(2,-4,0,50);
		n.setNBH(3,-4,0,51);
		n.setNBH(4,-4,0,52);
		n.setNBH(4,-3,0,53);
		n.setNBH(4,-2,0,54);
		n.setNBH(4,-1,0,55);
		n.setNBH(4,0,0,56);
		n.setNBH(4,1,0,57);
		n.setNBH(4,2,0,58);
		n.setNBH(4,3,0,59);
		n.setNBH(4,4,0,60);
		n.setNBH(3,4,0,61);
		n.setNBH(2,4,0,62);
		n.setNBH(1,4,0,63);
		n.setNBH(0,4,0,64);
		n.setNBH(-1,4,0,65);
		n.setNBH(-2,4,0,66);
		n.setNBH(-3,4,0,67);
		n.setNBH(-4,4,0,68);
		n.setNBH(-4,3,0,69);
		n.setNBH(-4,2,0,70);
		n.setNBH(-4,1,0,71);
		n.setNBH(-4,0,0,72);
		n.setNBH(-4,-1,0,73);
		n.setNBH(-4,-2,0,74);
		n.setNBH(-4,-3,0,75);
		n.setNBH(-4,-4,0,76);
		n.setNBH(-3,-4,0,77);
		n.setNBH(-2,-4,0,78);
		n.setNBH(-1,-4,0,79);
		}
		
		/*
		if(hood == 28) {
			newNbrhood(xxx);
			n.setNBH( 0, 0, 0, 0);
			n.setNBH( 1, 0, 0, 1);
			n.setNBH( -1, 0, 0, 2);
			n.setNBH( 0, 1, 0, 3);
			n.setNBH( 0, -1, 0, 4);

			n.setNBH( 1, 0, 0, 5);
			n.setNBH( -1, 0, 0, 6);
			n.setNBH( 0, 1, 0, 7);
			n.setNBH( 0, -1, 0, 8);
		}
		
		/*
		if(hood == 29) {
			newNbrhood(xxx);
			
		}
		
		
		/*
		if(hood == 2) {
			newNbrhood(xxx);
			
		}
		
		
		/**/
		
	}
	
}/*
*/