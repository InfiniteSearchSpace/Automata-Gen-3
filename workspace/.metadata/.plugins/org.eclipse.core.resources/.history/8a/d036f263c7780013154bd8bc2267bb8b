import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;


@SuppressWarnings("serial")
public class SurfacePanel extends JPanel {

	int xx;
	int yy;
	int zz;
	
    int col1 = 0;
    int col2 = 0;
    int col3 = 0; //RGB colour ints
    
    Universe u; //main logic container
    automataLib a;
    dataSources d = new dataSources();
    
    float[] floats = new float[3]; //holds rgb -> hsb conversion vals  

    
    private void doDrawing(Graphics g, int zdraw) { //main display output
    	
    	updateUniverse();
    	
        Graphics2D g2d = (Graphics2D) g; //some sort of magic

        
        
        for (int i = 0; i < xx; i++) {
            for (int j = 0; j < yy; j++) {
				//for (int k = 0; k < zz; k++) {

						int k=zdraw;
						//zdraw++;
						//zdraw = zdraw % zz;
						
						
					if(u.universe[i][j][k] == 0) {col3=185; col2=195; col1=215;}
					if(u.universe[i][j][k] > 0) {col1 = 255-(255*(u.universe[i][j][k]/u.maxVal)); col2 = col1; col3 = col1;} // rgbmax - ( rgbmax * (val/maxval) )
					if(u.universe[i][j][k] < 0) {col2 = 0; col3 = 0;}
					if(u.universe[i][j][k] == 1) {col1 = 0; col2 = 200; col3 = 255;}

	                floats = Color.RGBtoHSB(col1, col2, col3, floats);
	                g2d.setColor(Color.getHSBColor(floats[0],floats[1],floats[2]));//(Color.blue);
	                g2d.drawLine(i,j,i,j);

				//}
            }
            zdraw++;
		zdraw = zdraw % zz;
        }

        repaint();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        doDrawing(g, 0);
    }
    
    
    
    public SurfacePanel(int myX, int myY, int myZ) { //constructor
    	
    	xx=myX;
    	yy=myY;
    	zz=myZ;
    	
    	u = new Universe(xx, yy, zz);
    	a = new automataLib(u, d);
    	
    	u.resetAr(0);
    	
    	runOnce();
    	
    }
    
    
    private void runOnce() {
    	//a.writeData(d.sources[0]);
    	//a.seedAll(512);
    	a.seed(64, 64, 0, 1);
    	a.seed(66, 64, 0, 1);
    	a.seedZ(12, 1);
    }
    	
    
    private void updateUniverse() { //handles universal calculations
    	
    	u.snap(); //snapshots the board to ensure all functions have equal execution options
    	
    	for(int i = 0; i < xx; i++) {
			for (int j = 0; j < yy; j++) {
				for (int k = 0; k < zz; k++) {
					
					if(k == 0) {
						a.turingSierpenski(i, j, k);
					}
					
					if(k == 1) {
						a.conwaytest(i, j, k);
					}
					
				}
			}
    	}
    	
    }
    
    
    
    
}