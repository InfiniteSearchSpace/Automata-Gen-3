public class neighbours {
	int[][] NBH;

	//constructor
	public neighbours(int countNbr) {
		
	}
	
	//Needs to accept both:
			//incremental patterns (moore, von, etc.) 
			//predifined patterns (user-input patterns)
	
	private void setVon(int size) {
		
	}
	
	private void setNbrArray(int countNbr){
		NBH = new int[countNbr][3]; //initiate array with required number of neighbour slots, [x][3] is for x,y,z
	}

	//called to define a neighbour's position (x,y,z,neighbour id)
	private void setNBH(int xx, int yy, int zz, int nbr) {
		NBH[nbr][0] = xx;
		NBH[nbr][1] = yy;
		NBH[nbr][2] = zz;
	}

}


/*public class neighbours {
int[][] NBH;

//constructor
public neighbours(int countNbr) {
//System.out.println("neighbours");
	NBH = new int[countNbr][3]; //initiate array with required number of neighbour slots

}

//called to define a neighbour's position (x,y,z,neighbour id)
public void setNBH(int xx, int yy, int zz, int nbr) {
	NBH[nbr][0] = xx;
	NBH[nbr][1] = yy;
	NBH[nbr][2] = zz;
}

}
*/